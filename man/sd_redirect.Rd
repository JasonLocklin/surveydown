% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ui.R
\name{sd_redirect}
\alias{sd_redirect}
\title{Create a Redirect Element for Shiny Applications}
\usage{
sd_redirect(
  id,
  url,
  button = TRUE,
  label = "Click here",
  delay = NULL,
  newtab = FALSE
)
}
\arguments{
\item{id}{A character string of a unique id to be used to identify the redirect button in the survey body.}

\item{url}{A character string specifying the URL to redirect to.}

\item{button}{A logical value indicating whether to create a button (TRUE) or
a text element (FALSE) for the redirect. Default is TRUE.}

\item{label}{A character string for the button or text label. Default is "Click here".}

\item{delay}{An optional numeric value specifying the delay in seconds before
automatic redirection. If NULL (default), no automatic redirection occurs.}

\item{newtab}{A logical value indicating whether to open the URL in a new tab (TRUE)
or in the current tab (FALSE). Default is FALSE.}
}
\value{
In a reactive context, returns a function that when called, renders the
redirect element. In a non-reactive context, returns the redirect element directly.
}
\description{
This function creates a UI element that redirects the user to a specified URL.
It can be used in both reactive and non-reactive contexts within Shiny applications.
}
\examples{
if (interactive()) {
  library(surveydown)

  # Create a minimal survey.qmd file for demonstration
  sd_demo_qmd(type = "sd_redirect")

  # Define a minimal server
  server <- function(input, output, session) {

    # Reactive expression that generates a url with an id variable
    # parsed from the url
    url_redirect <- reactive({
      params <- sd_get_url_pars()
      id <- params["id"]
      return(paste0("https://www.google.com?id=", id))
    })

    # Create the redirect button
    sd_redirect(
      id = "redirect_url_pars",
      url = url_redirect(),
      button = TRUE,
      label = "Redirect"
    )

    sd_skip_if(
      input$screening_question == "end_1" ~ "end_page_1",
      input$screening_question == "end_1" ~ "end_page_2",
    )

    sd_server()
  }

  # Run the Shiny app
  shiny::shinyApp(ui = sd_ui(), server = server)
}
}
