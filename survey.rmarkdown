---
title: "Survey App with Quarto and Shiny"
format: html
runtime: shiny
---

```{r}
#| label: setup
#| include: false

library(shiny)
library(knitr)
library(shinyjs)
library(stringr)
library(fs)
library(xml2)
library(rvest)

source('functions.R')
source('mySurvey.R')  # Source the module

# First get the html sections
html_sections <- prep_survey("survey.qmd") # Using the name of the current file
```



## Welcome to the Survey!

Answer the following questions:



```{r, echo=FALSE}
# Using the `question()` function to generate Shiny inputs.
question("text", "age_input", "What is your age?")

question("select", "gender_input", "Choose your gender:", choices = c("Male", "Female", "Other"))

question("text", "gender_other_input", "Please specify your gender:", conditional = reactive({input$gender_input == "Other"}))
```



---



```{r, echo=FALSE}
color_choices <- get_color_choices_for_respondent(respondent_id)
question("checkbox", "color_input", "Pick a color:", choices = color_choices)
```

```{r, include=FALSE}
ui <- fluidPage(
  # Display current survey page
  htmlOutput("surveyPage"),
  
  # Buttons for navigation (Add logic as needed)
  actionButton("prev_btn", "Previous"),
  actionButton("next_btn", "Next")
)

server <- function(input, output, session) {
  current_page <- reactiveVal(1)

  # Render the current survey page
  output$surveyPage <- renderUI({
    HTML(html_sections[[current_page()]])
  })

  # Logic to navigate between pages
  observeEvent(input$next_btn, {
    if (current_page() < length(html_sections)) {
      current_page(current_page() + 1)
    }
  })
  
  observeEvent(input$prev_btn, {
    if (current_page() > 1) {
      current_page(current_page() - 1)
    }
  })
  
  # Further logic for dependencies, data storage, etc., can be added here.
}

shinyApp(ui, server)
```



This is the end of the survey

